@page "/login"
@using GloboClima.Core.DTOs
@using GloboClima.Frontend.Services
@inject AuthService AuthService
@inject NavigationManager Navigation

<PageTitle>Login - GloboClima</PageTitle>

<div class="container">
    <div class="row justify-content-center mt-5">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow">
                <div class="card-header text-center bg-primary text-white">
                    <h3><i class="fas fa-globe-americas me-2"></i>GloboClima</h3>
                    <p class="mb-0">Entre na sua conta</p>
                </div>
                <div class="card-body p-4">
                    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="loginModel.Email" class="form-control"
                                       placeholder="seu@email.com" />
                            <ValidationMessage For="() => loginModel.Email" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Senha</label>
                            <InputText @bind-Value="loginModel.Password" type="password"
                                       class="form-control" placeholder="Sua senha" />
                            <ValidationMessage For="() => loginModel.Password" class="text-danger" />
                        </div>

                        @if (errorMessage != null)
                        {
                            <div class="alert alert-danger">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                @errorMessage
                            </div>
                        }

                        <div class="d-grid mb-3">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                <i class="fas fa-sign-in-alt me-2"></i>
                                Entrar
                            </button>
                        </div>
                    </EditForm>

                    <hr>

                    <div class="text-center">
                        <p class="mb-0">Não tem uma conta?</p>
                        <a href="/register" class="btn btn-outline-primary">
                            <i class="fas fa-user-plus me-2"></i>
                            Criar conta
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginRequest loginModel = new();
    private string? errorMessage;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var success = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);
            if (success)
            {
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = "Email ou senha inválidos.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao fazer login: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}