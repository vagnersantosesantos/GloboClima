AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'GloboClima - Sistema completo .NET 9'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']
  
  JWTSecret:
    Type: String
    NoEcho: true
    Description: 'JWT Secret Key'
  
  OpenWeatherMapApiKey:
    Type: String
    NoEcho: true
    Description: 'OpenWeatherMap API Key'

Globals:
  Function:
    Timeout: 30
    Runtime: dotnet8  # AWS ainda n√£o suporta dotnet9 oficialmente
    MemorySize: 512
    Environment:
      Variables:
        ASPNETCORE_ENVIRONMENT: !Ref Environment
        JWT__SECRET: !Ref JWTSecret
        JWT__ISSUER: 'GloboClima'
        JWT__AUDIENCE: 'GloboClima-Users'
        OPENWEATHERMAP__APIKEY: !Ref OpenWeatherMapApiKey

Resources:
  # DynamoDB Users Table
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'GloboClima-Users-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: Email
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: Email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      SSESpecification:
        SSEEnabled: true

  # Lambda Function
  GloboclimaApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'globoclima-api-${Environment}'
      CodeUri: ../../src/GloboClima.Lambda/bin/Release/net9.0/publish/
      Handler: GloboClima.Lambda::GloboClima.Lambda.LambdaEntryPoint::FunctionHandlerAsync
      Runtime: provided.al2023  # Custom runtime para .NET 9
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref UsersTable
          AWS_REGION: !Ref AWS::Region
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource: 
                - !GetAtt UsersTable.Arn
                - !Sub '${UsersTable.Arn}/index/*'
      Events:
        ProxyResource:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /{proxy+}
            Method: ANY
        RootResource:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /
            Method: ANY

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub 'globoclima-api-${Environment}'
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'*'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'*'"

  # S3 Bucket for Frontend
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'globoclima-frontend-${Environment}-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000

  # Bucket Policy
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub '${FrontendBucket}/*'

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
          - Id: ApiOrigin
            DomainName: !Sub '${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com'
            CustomOriginConfig:
              HTTPPort: 443
              OriginProtocolPolicy: https-only
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
          Compress: true
        CacheBehaviors:
          - PathPattern: '/api/*'
            TargetOriginId: ApiOrigin
            ViewerProtocolPolicy: https-only
            AllowedMethods: [DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              QueryString: true
              Headers: [Authorization, Content-Type, Accept, Origin, Referer]
            TTL: 0
            DefaultTTL: 0
            MaxTTL: 0
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html

Outputs:
  ApiUrl:
    Description: 'API Gateway URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub 'GloboClima-API-URL-${Environment}'
  
  FrontendUrl:
    Description: 'CloudFront Distribution URL'
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub 'GloboClima-Frontend-URL-${Environment}'
  
  FrontendBucket:
    Description: 'Frontend S3 Bucket'
    Value: !Ref FrontendBucket
    Export:
      Name: !Sub 'GloboClima-S3-Bucket-${Environment}'
  
  DistributionId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub 'GloboClima-CF-Distribution-${Environment}'