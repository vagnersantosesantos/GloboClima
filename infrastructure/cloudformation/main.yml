AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'GloboClima - Deploy Free Tier (Fixed)'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
  
  JWTSecret:
    Type: String
    NoEcho: true
  
  OpenWeatherMapApiKey:
    Type: String
    NoEcho: true

Resources:
  # DynamoDB Table
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'GloboClima-Users-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH

  # S3 Bucket
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'globoclima-${Environment}-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # Bucket Policy
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: FrontendBucket
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 
              - s3:GetObject
            Resource: !Sub '${FrontendBucket}/*'

  # Lambda Function (CORRIGIDO)
ApiFunction:
  Type: AWS::Serverless::Function
  Properties:
    FunctionName: 'globoclima-dev'
    Runtime: dotnet9
    Handler: GloboClima.Lambda::GloboClima.Lambda.LambdaEntryPoint::FunctionHandlerAsync
    CodeUri: ./src/GloboClima.Lambda/bin/Release/net9.0/linux-x64/publish/ 
    MemorySize: 512
    Timeout: 30
    Environment:
      Variables:
        DYNAMODB_TABLE_NAME: !Ref UsersTable
        JWT__SECRET: !Ref JWTSecret
        JWT__ISSUER: 'GloboClima'
        JWT__AUDIENCE: 'GloboClima-Users'
        OPENWEATHERMAP__APIKEY: !Ref OpenWeatherMapApiKey
    Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTable
    Events:
      ApiEvent:
        Type: Api
        Properties:
          Path: /{proxy+}
          Method: ANY
      RootEvent:
        Type: Api
        Properties:
          Path: /
          Method: ANY

Outputs:
  ApiUrl:
    Description: 'API Gateway URL'
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'
    Export:
      Name: !Sub 'GloboClima-API-URL-${Environment}'
    
  FrontendUrl:
    Description: 'Frontend S3 Website URL'
    Value: !Sub 'http://${FrontendBucket}.s3-website-${AWS::Region}.amazonaws.com'
    Export:
      Name: !Sub 'GloboClima-Frontend-URL-${Environment}'
    
  BucketName:
    Description: 'S3 Bucket Name'
    Value: !Ref FrontendBucket
    Export:
      Name: !Sub 'GloboClima-Bucket-${Environment}'