name: Deploy GloboClima Auto

on:
  push:
    branches: 
      - main
      - develop
  pull_request:
    branches: 
      - main
  workflow_dispatch: 

env:
  AWS_REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: ⚙️ Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: 🔐 Configure AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: 🔍 Debug Structure
      run: |
        echo "🚀 Starting auto deploy for commit: ${{ github.sha }}"
        echo "📁 Project structure:"
        find . -name "*.csproj" -type f | head -10
        ls -la src/ 2>/dev/null || echo "src folder not found"
    
    - name: 🔨 Build Lambda
      run: |
        echo "Building Lambda for auto deploy..."
        cd src/GloboClima.Lambda
        dotnet publish -c Release -r linux-x64 --self-contained true -o publish
        
        cd publish
        cat > bootstrap << 'EOF'
        #!/bin/bash
        set -euo pipefail
        exec ./GloboClima.Lambda
        EOF
        chmod +x bootstrap
        
        echo "✅ Lambda build completed"
        ls -la
    
    - name: 📦 Install SAM CLI
      run: |
        pip install aws-sam-cli
        sam --version
    
    - name: 📝 Create SAM Template
      run: |
        cat > sam-template.yml << 'EOF'
        AWSTemplateFormatVersion: '2010-09-09'
        Transform: AWS::Serverless-2016-10-31
        Description: 'GloboClima - Auto Deploy'

        Parameters:
          JWTSecret:
            Type: String
            NoEcho: true
          OpenWeatherMapApiKey:
            Type: String
            NoEcho: true

        Resources:
          UsersTable:
            Type: AWS::DynamoDB::Table
            Properties:
              TableName: 'GloboClima-Users-dev'
              BillingMode: PAY_PER_REQUEST
              AttributeDefinitions:
                - AttributeName: Id
                  AttributeType: S
              KeySchema:
                - AttributeName: Id
                  KeyType: HASH

          ApiFunction:
            Type: AWS::Serverless::Function
            Properties:
              FunctionName: 'globoclima-dev'
              Runtime: provided.al2023
              CodeUri: ./src/GloboClima.Lambda/publish/
              Handler: bootstrap
              MemorySize: 256
              Timeout: 30
              Environment:
                Variables:
                  DYNAMODB_TABLE_NAME: !Ref UsersTable
                  JWT__SECRET: !Ref JWTSecret
                  JWT__ISSUER: 'GloboClima'
                  JWT__AUDIENCE: 'GloboClima-Users'
                  OPENWEATHERMAP__APIKEY: !Ref OpenWeatherMapApiKey
                  # AWS_REGION: !Ref AWS::Region
              Policies:
                - DynamoDBCrudPolicy:
                    TableName: !Ref UsersTable
              Events:
                ApiEvent:
                  Type: Api
                  Properties:
                    Path: /{proxy+}
                    Method: ANY
                RootEvent:
                  Type: Api
                  Properties:
                    Path: /
                    Method: ANY

          FrontendBucket:
            Type: AWS::S3::Bucket
            Properties:
              BucketName: !Sub 'globoclima-dev-${AWS::AccountId}'
              WebsiteConfiguration:
                IndexDocument: index.html
              PublicAccessBlockConfiguration:
                BlockPublicAcls: false
                BlockPublicPolicy: false
                IgnorePublicAcls: false
                RestrictPublicBuckets: false

          BucketPolicy:
            Type: AWS::S3::BucketPolicy
            Properties:
              Bucket: !Ref FrontendBucket
              PolicyDocument:
                Statement:
                  - Effect: Allow
                    Principal: '*'
                    Action: s3:GetObject
                    Resource: !Sub 'arn:aws:s3:::${FrontendBucket}/*'

        Outputs:
          ApiUrl:
            Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'
          FrontendUrl:
            Value: !Sub 'http://${FrontendBucket}.s3-website-${AWS::Region}.amazonaws.com'
          BucketName:
            Value: !Ref FrontendBucket
        EOF
        
        echo "✅ SAM template created"
    
    - name: ☁️ Deploy Infrastructure
      run: |
        echo "🚀 Auto deploying infrastructure..."
        
        sam deploy \
          --template-file sam-template.yml \
          --stack-name globoclima-dev \
          --parameter-overrides \
            JWTSecret="${{ secrets.JWT_SECRET }}" \
            OpenWeatherMapApiKey="${{ secrets.OPENWEATHERMAP_API_KEY }}" \
          --capabilities CAPABILITY_IAM \
          --resolve-s3 \
          # --region ${{ env.AWS_REGION }} \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset
    
    - name: 🎨 Build & Deploy Frontend
      run: |
        echo "Building frontend..."
        cd src/GloboClima.Frontend
        dotnet publish -c Release -o dist
        
        echo "Uploading to S3..."
        BUCKET=$(aws cloudformation describe-stacks \
          --stack-name globoclima-dev \
          --query 'Stacks[0].Outputs[?OutputKey==`BucketName`].OutputValue' \
          --output text)
        
        aws s3 sync dist/wwwroot/ s3://$BUCKET/ --delete
        
        echo "🎉 AUTO DEPLOY COMPLETED!"
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name globoclima-dev \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
          --output text)
        FRONTEND_URL=$(aws cloudformation describe-stacks \
          --stack-name globoclima-dev \
          --query 'Stacks[0].Outputs[?OutputKey==`FrontendUrl`].OutputValue' \
          --output text)
        
        echo "📡 API: $API_URL"
        echo "🌐 Frontend: $FRONTEND_URL"
        
        # Comentário no PR (se for PR)
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "This would be a PR comment with URLs"
        fi
