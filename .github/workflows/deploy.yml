name: Deploy GloboClima (Force Clean)

on:
  push:
    branches: 
      - main
      - develop
  pull_request:
    branches: 
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: 🚨 Force Clean ROLLBACK_COMPLETE Stack
      run: |
        echo "🧹 Checking stack status..."
        
        STACK_STATUS=$(aws cloudformation describe-stacks \
          --stack-name globoclima-dev \
          --query 'Stacks[0].StackStatus' \
          --output text \
          --region ${{ env.AWS_REGION }} 2>/dev/null || echo "STACK_NOT_FOUND")
        
        echo "Current stack status: $STACK_STATUS"
        
        if [[ "$STACK_STATUS" == "ROLLBACK_COMPLETE" ]]; then
          echo "🚨 Stack in ROLLBACK_COMPLETE state - forcing delete..."
          
          aws cloudformation delete-stack \
            --stack-name globoclima-dev \
            --region ${{ env.AWS_REGION }}
          
          echo "⏳ Waiting for stack deletion..."
          aws cloudformation wait stack-delete-complete \
            --stack-name globoclima-dev \
            --region ${{ env.AWS_REGION }}
          
          echo "✅ Stack deleted successfully"
          
        elif [[ "$STACK_STATUS" != "STACK_NOT_FOUND" ]]; then
          echo "⚠️ Stack exists in state: $STACK_STATUS - deleting anyway..."
          
          aws cloudformation delete-stack \
            --stack-name globoclima-dev \
            --region ${{ env.AWS_REGION }}
          
          aws cloudformation wait stack-delete-complete \
            --stack-name globoclima-dev \
            --region ${{ env.AWS_REGION }}
          
          echo "✅ Stack deleted"
        else
          echo "✅ No existing stack found"
        fi
    
    - name: 🔨 Build Lambda
      run: |
        echo "Building Lambda..."
        cd src/GloboClima.Lambda
        dotnet publish -c Release -r linux-x64 --self-contained true -o publish
        
        cd publish
        cat > bootstrap << 'EOF'
        #!/bin/bash
        set -euo pipefail
        exec ./GloboClima.Lambda
        EOF
        chmod +x bootstrap
        
        echo "✅ Lambda built - Files:"
        ls -la
    
    - name: ☁️ Deploy Fresh Stack
      run: |
        echo "🚀 Creating fresh stack..."
        
        aws cloudformation create-stack \
          --stack-name globoclima-dev \
          --template-body file://infrastructure/deploy.yml \
          --parameters \
            ParameterKey=JWTSecret,ParameterValue="${{ secrets.JWT_SECRET }}" \
            ParameterKey=OpenWeatherMapApiKey,ParameterValue="${{ secrets.OPENWEATHERMAP_API_KEY }}" \
          --capabilities CAPABILITY_NAMED_IAM \
          --region ${{ env.AWS_REGION }}
        
        echo "⏳ Waiting for stack creation (this may take 5-10 minutes)..."
        aws cloudformation wait stack-create-complete \
          --stack-name globoclima-dev \
          --region ${{ env.AWS_REGION }}
        
        echo "✅ Stack created successfully!"
    
    - name: 📊 Verify Stack
      run: |
        echo "📋 Stack Details:"
        aws cloudformation describe-stacks \
          --stack-name globoclima-dev \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].[StackName,StackStatus]' \
          --output table
        
        echo "📋 Stack Outputs:"
        aws cloudformation describe-stacks \
          --stack-name globoclima-dev \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs' \
          --output table
    
    - name: 📦 Upload Lambda Code
      run: |
        echo "Uploading Lambda code..."
        cd src/GloboClima.Lambda/publish
        
        # Create ZIP
        zip -r lambda-package.zip .
        
        # Upload to Lambda function
        aws lambda update-function-code \
          --function-name globoclima-dev \
          --zip-file fileb://lambda-package.zip \
          --region ${{ env.AWS_REGION }}
        
        echo "✅ Lambda code uploaded"
    
    - name: 🎨 Deploy Frontend
      run: |
        echo "Deploying frontend..."
        cd src/GloboClima.Frontend
        dotnet publish -c Release -o dist
        
        # Get bucket name from stack outputs
        BUCKET=$(aws cloudformation describe-stacks \
          --stack-name globoclima-dev \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`BucketName`].OutputValue' \
          --output text)
        
        echo "Uploading to bucket: $BUCKET"
        aws s3 sync dist/wwwroot/ s3://$BUCKET/ --delete
        
        echo "🎉 DEPLOY COMPLETED SUCCESSFULLY!"
        
        # Show final URLs
        FRONTEND_URL=$(aws cloudformation describe-stacks \
          --stack-name globoclima-dev \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`FrontendUrl`].OutputValue' \
          --output text)
        
        LAMBDA_ARN=$(aws cloudformation describe-stacks \
          --stack-name globoclima-dev \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`LambdaArn`].OutputValue' \
          --output text)
        
        echo "🌐 Frontend URL: $FRONTEND_URL"
        echo "⚡ Lambda ARN: $LAMBDA_ARN"
    
    - name: 🚨 Debug on Failure
      if: failure()
      run: |
        echo "Debugging failed deployment..."
        
        # Show stack events for failed resources
        aws cloudformation describe-stack-events \
          --stack-name globoclima-dev \
          --region ${{ env.AWS_REGION }} \
          --query 'StackEvents[?ResourceStatus==`CREATE_FAILED`].[LogicalResourceId,ResourceStatusReason]' \
          --output table || echo "No stack events found"
        
        # Show current stack status
        aws cloudformation describe-stacks \
          --stack-name globoclima-dev \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].StackStatus' \
          --output text || echo "No stack found"